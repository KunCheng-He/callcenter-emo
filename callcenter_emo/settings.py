"""
Django settings for callcenter_emo project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import datetime
from pathlib import Path

from .config import mysql_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mkld8i9b3okgj4p-8r!&kl)eqpt+%1j(kp&68r6ff_t_6rq$rz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',         # 跨域支持
    'rest_framework',      # REST API
    'apps.accounts',       # 自定义用户、角色
    'apps.email_login',    # 改用邮箱登录
    'apps.upload_events',  # 上传事件
    'apps.audio',          # 音频处理
    'apps.emotion',        # 音频情感识别
    'apps.ding_label',     # 情感标注
    'apps.ser_model',      # 语音情感识别模型
    'drf_spectacular',     # OpenAPI
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 跨域
]

ROOT_URLCONF = 'callcenter_emo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'callcenter_emo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': mysql_config
}

# 使用自定义的用户模型
AUTH_USER_MODEL = "accounts.CustomUser"

# 改用邮箱进行验证登录
AUTHENTICATION_BACKENDS = ['apps.email_login.models.CustomModelBackend']

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST API 配置
REST_FRAMEWORK = {
    # 默认架构类(openapi文档)
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # 使用rest_framework_simplejwt验证身份
        'rest_framework.authentication.SessionAuthentication',  # 次要进行session认证
        'rest_framework.authentication.BasicAuthentication'  # 测试的时候需要使用基本认证
    ]
}

# API 元数据设置
SPECTACULAR_SETTINGS = {
    'TITLE': '呼叫中心智能质检 API',
    'DESCRIPTION': '该项目分两个模块，智能质检部分通过模型对语音情感进行识别，给出一定的质检分析，第二部分让用户审计模型的识别结果，将错误内容剪辑成新的片段，以此加大训练模型的数据量',
    'VERSION': '0.0.1',
    'SERVE_INCLUDE_SCHEMA': False,
}

# simplejwt 配置
SIMPLE_JWT = {
    # token有效时长
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=30),
    # token刷新后的有效时间
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
}

# 跨域支持
# CORS_ALLOWED_ORIGINS = ['http://127.0.0.1:5173', 'http://172.18.254.166:5173']  # 授权进行跨站点 HTTP 请求的源列表
# # 因为跨域之后需要传递sessionid 到浏览器cookie，所以添加如下配置。
# CORS_ALLOW_CREDENTIALS = True  # 允许 Cookie 包含在跨站点 HTTP 请求中
# SESSION_COOKIE_SAMESITE = None  # django 自己的安全策略
CORS_ALLOW_ALL_ORIGINS = True
